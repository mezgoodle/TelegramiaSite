{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Welcome to Telegramia! Overview Telegramia - is the text-based game in Telegram . Shortly, it's just a bot , that interects with the user. History A long time ago I have seen some games in Telegram and it interested me. Also I like Warcraft , MMORPG. So I combined telegram game and RPG genre. At first it was a big one file, close to 600 lines of code. Then I founded this template . But this template is bad and outdated, and moved to another . After that I have started to test my bot and improve the architecture. Telegramia group When I have started to develop the bot, some ideas have comed to me. I have also some knowledges in another areas, such as web development and data analysis . And I created more projects, related to the Telegramia . Here you can read everything about Telegramia group projects .","title":"Home"},{"location":"#welcome-to-telegramia","text":"","title":"Welcome to Telegramia!"},{"location":"#overview","text":"Telegramia - is the text-based game in Telegram . Shortly, it's just a bot , that interects with the user.","title":"Overview"},{"location":"#history","text":"A long time ago I have seen some games in Telegram and it interested me. Also I like Warcraft , MMORPG. So I combined telegram game and RPG genre. At first it was a big one file, close to 600 lines of code. Then I founded this template . But this template is bad and outdated, and moved to another . After that I have started to test my bot and improve the architecture.","title":"History"},{"location":"#telegramia-group","text":"When I have started to develop the bot, some ideas have comed to me. I have also some knowledges in another areas, such as web development and data analysis . And I created more projects, related to the Telegramia . Here you can read everything about Telegramia group projects .","title":"Telegramia group"},{"location":"group/","text":"What is it? Telegramia group - it's a number of projects, related to the Telegramia game: Telegramia itself. Telegramia-API. Telegramia Stats. TelegramiaSite. Telegramia It's the bot in Telegram. Details information about it can be found here . Telegramia-API It's the site, where you can fetch the data from the Telegram database. Build as REST-API. Details information about it can be found here . TelegramiaStats It's the Google Colab notebook, where you can see the data analysis for the Telegramia data. Details information about it can be found here . TelegramiaSite It's the site built on Mkdocs-Material, where you can see the documentation for the Telegramia group projects. Details information about it can be found here .","title":"Telegramia group"},{"location":"group/#what-is-it","text":"Telegramia group - it's a number of projects, related to the Telegramia game: Telegramia itself. Telegramia-API. Telegramia Stats. TelegramiaSite.","title":"What is it?"},{"location":"group/#telegramia","text":"It's the bot in Telegram. Details information about it can be found here .","title":"Telegramia"},{"location":"group/#telegramia-api","text":"It's the site, where you can fetch the data from the Telegram database. Build as REST-API. Details information about it can be found here .","title":"Telegramia-API"},{"location":"group/#telegramiastats","text":"It's the Google Colab notebook, where you can see the data analysis for the Telegramia data. Details information about it can be found here .","title":"TelegramiaStats"},{"location":"group/#telegramiasite","text":"It's the site built on Mkdocs-Material, where you can see the documentation for the Telegramia group projects. Details information about it can be found here .","title":"TelegramiaSite"},{"location":"api/","text":"","title":"Introduction"},{"location":"site/","text":"","title":"Introduction"},{"location":"stats/","text":"","title":"Introduction"},{"location":"telegramia/","text":"Overview Technical details The bot is written in Python with the library aiogram . The source code is available here . I used the template for my project structure. It's increased the readability and it's easier to maintain. All functions are documented and the code is well commented. When I had a single file, even in Visual Studio Code it was hard to read. But now everything is in their folders and bot works faster. For interactions with the database I used motor . It's a great library for working with databases. It's a good choice for a project with a lot of data. MongoDB is a great choice for a database. Manual Screenshots Installation pip install aiogram pip install motor Usage import aiogram from aiogram import Bot , Dispatcher , executor , types bot = Bot ( token = \"YOUR_TOKEN\" ) dp = Dispatcher ( bot ) @dp . message_handler ( commands = [ \"start\" ]) async def cmd_start ( message : types . Message ): await message . reply ( \"Hi!\" ) if __name__ == \"__main__\" : executor . start_polling ( dp , skip_updates = True ) License Contacts","title":"Introduction"},{"location":"telegramia/#overview","text":"","title":"Overview"},{"location":"telegramia/#technical-details","text":"The bot is written in Python with the library aiogram . The source code is available here . I used the template for my project structure. It's increased the readability and it's easier to maintain. All functions are documented and the code is well commented. When I had a single file, even in Visual Studio Code it was hard to read. But now everything is in their folders and bot works faster. For interactions with the database I used motor . It's a great library for working with databases. It's a good choice for a project with a lot of data. MongoDB is a great choice for a database.","title":"Technical details"},{"location":"telegramia/#manual","text":"","title":"Manual"},{"location":"telegramia/#screenshots","text":"","title":"Screenshots"},{"location":"telegramia/#installation","text":"pip install aiogram pip install motor","title":"Installation"},{"location":"telegramia/#usage","text":"import aiogram from aiogram import Bot , Dispatcher , executor , types bot = Bot ( token = \"YOUR_TOKEN\" ) dp = Dispatcher ( bot ) @dp . message_handler ( commands = [ \"start\" ]) async def cmd_start ( message : types . Message ): await message . reply ( \"Hi!\" ) if __name__ == \"__main__\" : executor . start_polling ( dp , skip_updates = True )","title":"Usage"},{"location":"telegramia/#license","text":"","title":"License"},{"location":"telegramia/#contacts","text":"","title":"Contacts"},{"location":"telegramia/manual/","text":"","title":"Manual"}]}